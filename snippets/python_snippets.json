[
    "from scipy.spatial import distance\na = (1, 2, 3)\nb = (4, 5, 6)\ndst = distance.euclidean(a, b)",
    "from sklearn.model_selection import train_test_split\ntrain_test_split(X, y, test_size=0.2, shuffle=False)\n",
    "import base64\n\nmessage = \"Python is fun\"\nmessage_bytes = message.encode('ascii')\nbase64_bytes = base64.b64encode(message_bytes)\nbase64_message = base64_bytes.decode('ascii')\n\nprint(base64_message)\n",
    "# You can do this with Reg Exp\nimport re\n\ns = 'asdf=5;iwantthis123jasd'\nresult = re.search('asdf=5;(.*)123jasd', s)\nprint(result.group(1))",
    "df = pd.DataFrame([{'c1':10, 'c2':100}, {'c1':11,'c2':110}, {'c1':12,'c2':120}])\nfor index, row in df.iterrows():\n\tprint(row['c1'], row['c2'])",
    "#Want to display an image in full screen?\nimport cv2 as cv\nimg = cv.imread('image.png')\ncv.imshow(\"fullscreen\", img)\ncv.setWindowProperty(\"fullscreen\", cv.WND_PROP_FULLSCREEN,cv.WINDOW_FULLSCREEN)\ncv.waitkey(10)",
    "dict = {\"Python\":750,\"Java\":950,\"Ruby\":700,\"C++\":200} \n \nsort_values = sorted(dict.items(), key=lambda y: y[1], reverse=True)\n\nfor i in sort_values:\n\tprint(i[0], i[1])",
    "import Tkinter as tk\nroot = tk.Tk()\n\ndef motion(event):\n\tx, y = event.x, event.y\n\tprint('{}, {}'.format(x, y))\n\nroot.bind('<Motion>', motion)\nroot.mainloop()",
    "# Saving the list\na = [\"apple\", \"banana\", 2, 3]\nwith open(\"test.txt\", \"w\") as f:\n\tfor item in a:\n\t\tf.write(\"%s\\n\" % item)\n\nwith open(\"test.txt\", \"r\") as f:\n\tprint(f.read())\n\n# Converting contents of file into new list\nf = open(\"test.txt\", \"r\")\nlistItems = f.read().splitlines()\nprint(listItems)",
    "def findFactors(num: int)->list:\n  factors=[]\n  for i in range(1,num+1):\n\t if num%i==0:\n\t\t factors.append(i)\n  return factors",
    "from django.db import models\n\nclass Car(models.Model):\n\tmanufacturer = models.ForeignKey('Manufacturer',on_delete=models.DO_NOTHING,)\n\nclass Manufacturer(models.Model):\n\tpass",
    "# Open a file: file\nfile = open('my_text_file',mode='r')\n\u00a0\n# read all lines at once\nall_of_it = file.read()\n\u00a0\n# close the file\nfile.close()",
    "n = 20\nprimes = []\n\nfor i in range(2, n + 1):\n\tfor j in range(2, int(i ** 0.5) + 1):\n \t\tif i%j == 0:\n \t\t\tbreak\n\telse:\n\t\tprimes.append(i)\n\nprint(primes)",
    "from tkinter import *\n\nwindow = Tk()\n# entry box\nmy_input = Entry()\nmy_input.pack()\n\nwindow.mainloop()",
    "import random\n\nmy_list = [\"a\", \"b\", \"c\", \"d\"]\nrandom_from_list = random.choice(my_list)",
    "from pymongo import MongoClient\n\nif __name__ == '__main__':\n\tclient = MongoClient(\"localhost\", 27017, maxPoolSize=50)\n\tdb = client.localhost\n\tcollection = db['chain']\n\tcursor = collection.find({})\n\tfor document in cursor:\n\t\t  print(document)",
    "import requests\nresp = requests.post('https://textbelt.com/text', {\n  'phone': '5555555555',\n  'message': 'Hello world',\n  'key': 'textbelt',\n})\nprint(resp.json())",
    "import traceback\n\ntry:\n\tdo_stuff()\nexcept Exception as err:\n\tprint(err, traceback.format_exc())\n",
    "import pickle\nfile_name='my_file.pkl'\nf = open(file_name,'wb')\npickle.dump(my_data,f)\nf.close()",
    "number = int(input(\"Enter A Number : \"))\n\nnum = 1\nwhile num <= 10:\n\ttotal = num * number\n\tprint(total)\n\tnum = num +1",
    "from datetime import datetime\n\nnow = datetime.now()\n\ncurrent_time = now.strftime(\"%H:%M:%S\")\nprint(\"Current Time =\", current_time)",
    "num = 10\nfor i in range(2,num+1):\n\tfor j in range(2,i):\n\t\tif(i%j == 0):\n\t\t\tbreak\n\telse:\n\t\tprint(i)",
    "@client.command()\nasync def create_channel(ctx, channel_name):\n\tguild = ctx.guild\n\tchannel = await guild.create_text_channel(channel_name)",
    "import matplotlib.pyplot as plt\nimport numpy as np\n\ndataArray = np.genfromtxt('data.csv', delimiter=',', names=True)\n\nplt.figure()\nfor col_name in dataArray.dtype.names:\n\tplt.plot(dataArray[col_name], label=col_name)\nplt.legend()\nplt.show()",
    "@async def on_message(message):\n\t if message.content == \"give me admin\"\n\t\t   role = discord.utils.get(server.roles, name=\"Admin\")\n\t\t   await client.add_roles(message.author.id, role)",
    "import subprocess\ncmd = \"ps -ef | grep script.py | awk '{print $1,$2,$3,$4}\u2019\u201d\nstdoutdata = subprocess.getoutput(cmd)\nprint(\"stdoutdata: \" + stdoutdata.split()[0])",
    "def wordPattern(pattern, s):\n\tdict1 = {}\n\tdict2 = {}\n\n\tfor key,value in enumerate(list(s.split(\" \"))):\n\t\tif value not in dict1:\n\t\t\tdict1[value]= [key]\n\t\telse:\n\t\t\tdict1[value].append(key)\n\n\tfor key,value in enumerate(pattern):\n\t\tif value not in dict2:\n\t\t\tdict2[value]= [key]\n\t\telse:\n\t\t\tdict2[value].append(key)\n\n\treturn (list(dict1.values()) == list(dict2.values()))",
    "def checkTableExists(dbcon, tablename):\n\tdbcur = dbcon.cursor()\n\tdbcur.execute(\"\"\"\n\t\tSELECT COUNT(*)\n\t\tFROM information_schema.tables\n\t\tWHERE table_name = '{0}'\n\t\t\"\"\".format(tablename.replace('\\'', '\\'\\'')))\n\tif dbcur.fetchone()[0] == 1:\n\t\tdbcur.close()\n\t\treturn True\n\n\tdbcur.close()\n\treturn False"
]