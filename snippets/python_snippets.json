[
    "from requests import get\n\nip = get('https://api.ipify.org').text\nprint(f'My public IP address is: {ip}')",
    "import os\nif not os.path.exists('my_folder'):\n\u00a0 \u00a0 os.makedirs('my_folder')",
    "from requests import get\nfrom bs4 import BeautifulSoup as bs\n\npage = get(\"http://website.url/goes-here\")\nsoup = bs(page.content, 'html.parser')",
    "for index, row in tqdm(df.iterrows(), total=df.shape[0]):\n   print(\"index\",index)\n   print(\"row\",row)",
    "%matplotlib ipympl\n\nimport matplotlib.pyplot as plt\n\na_x=[1,2,3,4,5,6]\na_y=[1,2,3,4,5,6]\n\nplt.plot(a_x, a_y)\nplt.show()",
    "import pickle\n\na = {'hello': 'world'}\n\nwith open('filename.pickle', 'wb') as handle:\n    pickle.dump(a, handle, protocol=pickle.HIGHEST_PROTOCOL)\n\nwith open('filename.pickle', 'rb') as handle:\n    b = pickle.load(handle)\n",
    "from datetime import datetime, timedelta\n\nyesterday = datetime.today() - timedelta(days = 1 )",
    "import random\nlines = open('file.txt').read().splitlines() # creates a list with one line per item\nrandomLine =random.choice(lines) # pick up a random item in this list",
    "import os\nfilePath = '/home/somedir/Documents/python/logs'\n\nif os.path.exists(filePath):\n    os.remove(filePath)\nelse:\n    print(\"Can not delete the file as it doesn't exists\")",
    "from datetime import datetime, timedelta\n>>> datetime.strftime(datetime.now() - timedelta(1), '%Y-%m-%d')\n'2015-05-26'",
    "import concurrent.futures\nimport tqdm\n\nwork_list = list(range(2**15))\n\n\ndef calc(x):\n    return x ** x\n\n\nwith concurrent.futures.ProcessPoolExecutor() as executor:\n    results = list(tqdm.tqdm(executor.map(calc, work_list), total=len(work_list)))\n\nprint(results[0:16])",
    "import datetime\nnow = datetime.datetime.now().year\nprint(now)",
    "import os\ndirectory = 'the/directory/you/want/to/use'\n\nfor filename in os.listdir(directory):\n    if filename.endswith(\".txt\"):\n      #do smth\n      continue\n    else:\n    continue",
    "import os\n\n# you can do like this\ncolumns, lines = os.get_terminal_size()\n\n# or \nsize = os.get_terminal_size()\n\ncolumns = size.columns\nlines = size.lines",
    "a_dictionary = {\"a\": 1, \"b\": 2, \"c\": 3}\n\n# get key with min value\nmin_key = min(a_dictionary, key=a_dictionary.get)\n\nprint(min_key)",
    "from selenium import webdriver\nfrom selenium.webdriver.chrome.options import Options\n\noptions = Options()\noptions.headless = True\ndriver = webdriver.Chrome(CHROMEDRIVER_PATH, chrome_options=options)",
    "import sys\nfrom time import sleep\n\ndef animate(text):\n  for letter in text:\n    print(letter, end=\"\")\n    sys.stdout.flush()\n    sleep(0.05) # I use 0.05 but you can change it\n\n\nanimate(\"This will be animated\")",
    "from matplotlib import pyplot as plt\nimport cv2\n\nimg = cv2.imread('/Users/barisx/test.jpg')\ngray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n\nplt.imshow(gray)\nplt.title('my picture')\nplt.show()",
    "from asgiref.sync import async_to_sync\n\nasync def func(args):\n\tpass\n   \nasync_to_sync(func)(args)\n",
    "from scipy.spatial import distance\na = (1, 2, 3)\nb = (4, 5, 6)\ndst = distance.euclidean(a, b)",
    "def colored(r, g, b, text):\n    return \"\\033[38;2;{};{};{}m{} \\033[38;2;255;255;255m\".format(r, g, b, text)\n  \ntext = 'Hello, World'\ncolored_text = colored(255, 0, 0, text)\nprint(colored_text)\n\n#or\n\nprint(colored(255, 0, 0, 'Hello, World'))",
    "import base64\n\nmessage = \"Python is fun\"\nmessage_bytes = message.encode('ascii')\nbase64_bytes = base64.b64encode(message_bytes)\nbase64_message = base64_bytes.decode('ascii')\n\nprint(base64_message)\n",
    "# You can do this with Reg Exp\nimport re\n\ns = 'asdf=5;iwantthis123jasd'\nresult = re.search('asdf=5;(.*)123jasd', s)\nprint(result.group(1))",
    "@client.event\nasync def on_message(message):\n    if message.content.startswith('!hello'):\n        embedVar = discord.Embed(title=\"Title\", description=\"Desc\", color=0x00ff00)\n        embedVar.add_field(name=\"Field1\", value=\"hi\", inline=False)\n        embedVar.add_field(name=\"Field2\", value=\"hi2\", inline=False)\n        await message.channel.send(embed=embedVar)\n",
    "for index, row in df.iterrows():\n    print(row['c1'], row['c2'])",
    "df = pd.DataFrame([{'c1':10, 'c2':100}, {'c1':11,'c2':110}, {'c1':12,'c2':120}])\nfor index, row in df.iterrows():\n    print(row['c1'], row['c2'])",
    "#Want to display an image in full screen?\nimport cv2 as cv\nimg = cv.imread('image.png')\ncv.imshow(\"fullscreen\", img)\ncv.setWindowProperty(\"fullscreen\", cv.WND_PROP_FULLSCREEN,cv.WINDOW_FULLSCREEN)\ncv.waitkey(10)",
    "import cv2\nimport numpy as np\nimport os\n\nimage_folder = 'data-set-race-01'\nvideo_file = 'race-01.mp4'\nimage_size = (160, 120)\nfps = 24\n\nimages = [img for img in os.listdir(image_folder) if img.endswith(\".jpg\")]\nimages.sort()\n\nout = cv2.VideoWriter(video_file, cv2.VideoWriter_fourcc(*'MP4V'), fps, image_size)\n\nimg_array = []\nfor filename in images:\n    img = cv2.imread(os.path.join(image_folder, filename))\n    img_array.append(img)\n    out.write(img)\n\nout.release()\n",
    "dict = {\"Python\":750,\"Java\":950,\"Ruby\":700,\"C++\":200} \n \nsort_values = sorted(dict.items(), key=lambda y: y[1], reverse=True)\n\nfor i in sort_values:\n\tprint(i[0], i[1])",
    "import Tkinter as tk\nroot = tk.Tk()\n\ndef motion(event):\n    x, y = event.x, event.y\n    print('{}, {}'.format(x, y))\n\nroot.bind('<Motion>', motion)\nroot.mainloop()",
    "# Saving the list\na = [\"apple\", \"banana\", 2, 3]\nwith open(\"test.txt\", \"w\") as f:\n    for item in a:\n        f.write(\"%s\\n\" % item)\n\nwith open(\"test.txt\", \"r\") as f:\n    print(f.read())\n\n# Converting contents of file into new list\nf = open(\"test.txt\", \"r\")\nlistItems = f.read().splitlines()\nprint(listItems)",
    "def findFactors(num: int)->list:\n  factors=[]\n  for i in range(1,num+1):\n     if num%i==0:\n         factors.append(i)\n  return factors",
    "from tkinter import filedialog\ntext_file=filedialog.askopenfilename(initialdir=\"D:/IT related folders and documents/\",title=\"Open Text File\",filetypes=((\"Text Files\", \"*.txt\"),))",
    "from django.db import models\n\nclass Car(models.Model):\n    manufacturer = models.ForeignKey('Manufacturer',on_delete=models.DO_NOTHING,)\n\nclass Manufacturer(models.Model):\n    pass"
]