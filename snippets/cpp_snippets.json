[
    "#include <WinUser.h>\n\nint main\n{\n    ShowWindow(GetConsoleWindow(), SW_HIDE);\n    \n    return 0;\n}",
    "sf::Vertex line[] =\n{\n    sf::Vertex(sf::Vector2f(10, 10)),\n    sf::Vertex(sf::Vector2f(150, 150))\n};\n\nwindow.draw(line, 2, sf::Lines);",
    "#include<iostream>\nusing namespace std;\n\nint main()\n{\n\t// Code here\n\treturn 0;\n}",
    "#include<iostream>\nusing namespace std;\nint main()\n{\n  int a,b;\n  cout <<\"Enter the number a and b\";\n  cin>>a>>b;\n  int c=a+b;\n  cout<<\"Sum is \"<<c;",
    "#include <Windows.h>\n\nint main() {\n\t//print stuff\n    \n\tsystem(\"cls\"); // clear console\n}",
    "#include <iostream>\n#include <chrono>\n\nint main() {\n    auto start = std::chrono::high_resolution_clock::now();\n    // operation to be timed ...\n    auto finish = std::chrono::high_resolution_clock::now();\n    auto time_in_nanoseconds =  std::chrono::duration_cast<std::chrono::nanoseconds>(finish-start).count();\n}\n",
    "#include <string>\n#include <iostream>\n#include <filesystem>\nnamespace fs = std::filesystem;\n\nint main()\n{\n    std::string path = \"/path/to/directory\";\n    for (const auto & entry : fs::directory_iterator(path))\n        std::cout << entry.path() << std::endl;\n}\n",
    "#include <algorithm> // max_element\n#include <vector> \n#include <iostream> // cout \nusing namespace std;\nint main(){\n  vector<int> v1{ 10, 20, 30, 40, 50, 25, 15 };\n  cout << *max_element(v1.begin(), v1.end());\n}",
    "#include<iostreme>\nusing namespace std;\nint main(){\n  cout<<\"Hello World!\";\n  return 0;\n}",
    "#include<iostream>\nusing namespace std;\n\nint main(){\n \n  cout << \"Hello World\" << endl;\n  \n  return 0;\n}",
    "std::wstring s2ws(const std::string& s)\n{\n    int len;\n    int slength = (int)s.length() + 1;\n    len = MultiByteToWideChar(CP_ACP, 0, s.c_str(), slength, 0, 0);\n    wchar_t* buf = new wchar_t[len];\n    MultiByteToWideChar(CP_ACP, 0, s.c_str(), slength, buf, len);\n    std::wstring r(buf);\n    delete[] buf;\n    return r;\n}\n",
    "int ***arr = new int**[X];\nfor (i = 0; i < z_size; ++i) {\n  arr[i] = new int*[Y];\n  for (j = 0; j < WIDTH; ++j)\n    arr[i][j] = new int[Z];\n}",
    "int arr[2][3] = {\n  {1,2,3}, \n  {4,5,6}\n};\nfor(int i=0 ; i<sizeof(arr) / sizeof(arr[0]) ; i++){\n\tfor(int j=0 ; j<sizeof(arr[i])/sizeof(arr[i][0]) ; j++){\n\t\tcout<<\"2D array have: \"<< arr[i][j]<<endl;\n\t}\n}",
    "std::string toBinary(int n)\n{\n    std::string r;\n    while(n!=0) {r=(n%2==0 ?\"0\":\"1\")+r; n/=2;}\n    return r;\n}\n",
    "#include <iostream>\nusing namespace std;\nbool isPrimeNumber(int n) {\n    if (n <= 1) return false;\n    if (n <= 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n  \n    for (int i = 5; i * i <= n; i = i + 6)\n        if (n % i == 0 || n % (i + 2) == 0)\n            return false;\n  \n    return true;\n}",
    "#include <fstream>\n#include <string>\n\nint main(int argc, char** argv)\n{\n\n  std::ifstream ifs(\"myfile.txt\");\n  std::string content( (std::istreambuf_iterator<char>(ifs) ),\n                       (std::istreambuf_iterator<char>()    ) );\n\n  return 0;\n}\n",
    "#include <string>\n#include <iostream>\n#include <filesystem>\nnamespace fs = std::filesystem;\n\nint main() {\n    std::string path = \"/path/to/directory\";\n    for (const auto & entry : fs::directory_iterator(path))\n        std::cout << entry.path() << std::endl;\n}",
    "#include <iostream>\n#include <list>\n\nstd::list<int> listOfNumbers = {1, 2, 3, 4};\n\nfor (int item : listOfNumbers)\n  std::cout << item << \" \";\n",
    " int n;\n    cin>>n;\n    int a=0,b=0,c=1;\n    if (n < 3) return 0;\n    cout<<a<<\" \"<<b<<\" \"<<c<<\" \";\n    for(int i = 1; i<= n-3; i++){\n        int d = a + b + c;\n        cout<<d<<\" \";\n        a = b;\n        b = c;\n        c = d;\n    }",
    "vector<int> v{10,21,24,13};\n\nint random = rand() % v.size();\nint sel_elem = v[random];\n\ncout<<\"Selected Element: \"<<sel_elem<<endl;",
    "import 'package:intl/intl.dart';\n\nDateTime now = DateTime.now();\nString formattedDate = DateFormat('yyyy-MM-dd \u2013 kk:mm').format(now);",
    "#include <locale>\n#include <codecvt>\n#include <string>\n\nstd::wstring_convert<std::codecvt_utf8_utf16<wchar_t>> converter;\nstd::string narrow = converter.to_bytes(wide_utf16_source_string);\nstd::wstring wide = converter.from_bytes(narrow_utf8_source_string);\n",
    "stack<pair<char, int>> s;\ns.push({'A', 20 });\ns.push(make_pair('B', 30));\ncout << s.top().first << \" \" << s.top().second;\ns.pop();",
    "#include <bits/stdc++.h> // Vector\n#include <algorithm>  // Reverse \nusing namespace std;\n\nint main()\n{\n    vector<int> nums{4,1,2,1,2};\n\n    reverse(nums.begin(), nums.end());\n    return 0;\n}\n",
    "int main()\n{\n    ios_base::sync_with_stdio(false);\n    cin.tie(NULL);\n    return 0;\n}",
    "#include <Windows.h>\nint main()\n{\n  int x = 3; int y = 4;\n  SetCursorPos(x, y); //set cursor position\n  return 0;\n}"
]